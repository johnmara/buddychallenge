package buddychallenge.services;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Scanner;

import buddychallenge.entities.Question;
import buddychallenge.entities.User;
import buddychallenge.exceptions.BuddyException;

public class BuddyRequest {
	private static int id;
	private int requestID;
	private User sender;
	private User receiver;
	private boolean result;
	private Map<Question, String> answers;

	public BuddyRequest(User sender, User receiver) {
		requestID = id++;
		result = false;
		this.sender = sender;
		this.receiver = receiver;
		answers = new HashMap<Question, String>();
		answerQuestions();
		calculate();
	} 

	public BuddyRequest() {
		this(null, null);
	}
	
	public void answerQuestions() {
		System.out.println("Answer the following questions: ");
		List<Question> answered = new ArrayList<Question>();
		List<Question> keys = new ArrayList<Question>(receiver.getQuestions()
				.keySet());
		int r;
		String answer;
		@SuppressWarnings("resource")
		Scanner sc = new Scanner(System.in);
		for (int i = 0; i < 2; i++) {
			r = random(keys.size());
			while (hasAnswered(keys.get(r), answered)) {
				r = random(keys.size());
				//System.out.println("epestrepse: " + random(keys.size())+ " megethos: " + keys.size());
			}
			answered.add(keys.get(r));
			Question q = keys.get(r);
			System.out.println(q.toString());
			answer = sc.nextLine();
			String option = q.getOptions().get(Integer.parseInt(answer) - 1);
			answers.put(q,
					option.substring(option.indexOf(".") + 1, option.length()));
		}
	}

	public void calculate() {
		int correct = 0;
		for (Map.Entry<Question, String> answer : answers.entrySet()) {
			for (Map.Entry<Question, String> answer2 : receiver.getQuestions()
					.entrySet()) {
				if (answer.getKey().equals(answer2.getKey())) {
					if (answer.getValue().equals(answer2.getValue())) {
						correct++;
					}
				}
			}
		}
		if (correct >= 1 && correct <= 10) {
			result = true;
		}
	}

	public boolean isResult() {
		if (result) {
			try {
				sender.addBuddy(receiver);
				receiver.addBuddy(sender);
			} catch (BuddyException e) {
				System.out.println(e.getMessage());
				return false;
			}
			return true;
		}

		return false;
	}

	public User getSender() {
		return sender;
	}

	public void setSender(User sender) {
		this.sender = sender;
	}

	public User getReceiver() {
		return receiver;
	}

	public void setReceiver(User receiver) {
		this.receiver = receiver;
	}

	public int getRequestID() {
		return requestID;
	}

	private static boolean hasAnswered(Question q, List<Question> answered) {
		for (Question q1 : answered) {
			if (q1.equals(q)) {
				return true;
			}
		}
		return false;
	}

	private static int random(int max) {
		Random r = new Random();
		return r.nextInt(max - 1);
	}
}
