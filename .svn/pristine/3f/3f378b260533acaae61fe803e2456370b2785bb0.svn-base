<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../../../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../../../.resources/report.gif" type="image/gif"/><title>UsersDAO.java</title><link rel="stylesheet" href="../../../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../../../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../../../.sessions.html" class="el_session">Sessions</a></span><a href="../../../index.html" class="el_report">test (3 Ιουν 2015 4:27:49 πμ)</a> &gt; <a href="../../index.html" class="el_group">BuddyChallenge</a> &gt; <a href="../index.html" class="el_bundle">src</a> &gt; <a href="index.source.html" class="el_package">buddychallenge.dao</a> &gt; <span class="el_source">UsersDAO.java</span></div><h1>UsersDAO.java</h1><pre class="source lang-java linenums">/*
 * 
 */
package buddychallenge.dao;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.StringTokenizer;

import buddychallenge.entities.User;
import buddychallenge.util.EmailAddress;
import buddychallenge.util.Gender;
import buddychallenge.util.Password;
import buddychallenge.util.Username;

// TODO: Auto-generated Javadoc
/**
 * The Class UsersDAO.
 */
public class UsersDAO {
	
	/** The user list. */
	static List&lt;User&gt; userList;

	//PostsDAO posts;
	
	/*public void setPosts(PostsDAO posts){
		this.posts = posts;
	}*/

	/**
	 * Instantiates a new users dao.
	 */
<span class="fc" id="L37">	public UsersDAO(){</span>
		
<span class="fc" id="L39">		setUserList(new ArrayList&lt;User&gt;());</span>
<span class="fc" id="L40">		SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd-mm-yy&quot;);</span>
<span class="fc" id="L41">		Date date = null;</span>
		try {
<span class="fc" id="L43">			date = sdf.parse(&quot;24-11-1994&quot;);</span>
<span class="pc" id="L44">		} catch (ParseException pe) {</span>
	
		}
<span class="fc" id="L47">		User mara = new User(new Username(&quot;mara&quot;), new Password(&quot;a199412&quot;), new EmailAddress(&quot;mara@hotmail.com&quot;), </span>
<span class="fc" id="L48">				&quot;John&quot;, &quot;Mara&quot;, Gender.Gender1, date);</span>
<span class="fc" id="L49">		userList.add(new User(new Username(&quot;bill&quot;), new Password(&quot;a199412&quot;), new EmailAddress(&quot;b.drosat@hotmail.com&quot;), </span>
<span class="fc" id="L50">				&quot;Bill&quot;, &quot;Drosats&quot;, Gender.Gender1, date));</span>
<span class="fc" id="L51">		userList.add(new User(new Username(&quot;teoo&quot;), new Password(&quot;a199412&quot;), new EmailAddress(&quot;b.drosat@hotmail.com&quot;), </span>
<span class="fc" id="L52">				&quot;Teo&quot;, &quot;Mara&quot;, Gender.Gender2, date));</span>
<span class="fc" id="L53">		userList.add(mara);</span>

		/*try {
			Post p = new Post(&quot;geia sou&quot;,mara,new PublicPostingRuleImpl());
			mara.createPost(p);
			posts.addPost(p);
			
		} catch (PostException e) {
			e.printStackTrace();
		}*/

		
		
<span class="fc" id="L66">	}</span>
	
	/**
	 * Instantiates a new users dao.
	 *
	 * @param userList the user list
	 */
<span class="nc" id="L73">	public UsersDAO(List&lt;User&gt; userList){</span>
<span class="nc" id="L74">		setUserList(userList);</span>
<span class="nc" id="L75">	}</span>
	

	/**
	 * Adds the user.
	 *
	 * @param user the user
	 */
	public void addUser(User user) {
<span class="fc" id="L84">		userList.add((User)user);</span>
<span class="fc" id="L85">	}</span>
	
	/**
	 * Removes the user.
	 *
	 * @param user the user
	 */
	public void removeUser(User user) {
<span class="nc" id="L93">		userList.remove((User)user);</span>
<span class="nc" id="L94">	}</span>
	
	/**
	 * Gets the user by id.
	 *
	 * @param id the id
	 * @return the user by id
	 */
	public User getUserByID(int id){
<span class="fc bfc" id="L103" title="All 2 branches covered.">		for (User u : userList){</span>
<span class="pc bpc" id="L104" title="1 of 2 branches missed.">			if (u.getUserID() == id){</span>
<span class="nc" id="L105">				return u;</span>
			}
		}
<span class="fc" id="L108">		return null;</span>
	}
	
	/**
	 * Gets the user list by name.
	 *
	 * @param name the name
	 * @return the user list by name
	 */
	public List&lt;User&gt; getUserListByName(String name){
<span class="fc" id="L118">		List&lt;User&gt; userListReturn = new ArrayList&lt;User&gt;();</span>
<span class="pc bpc" id="L119" title="1 of 2 branches missed.">		if(name.contains(&quot; &quot;)){</span>
<span class="nc" id="L120">			StringTokenizer token = new StringTokenizer(name, &quot; &quot;);</span>
<span class="nc bnc" id="L121" title="All 2 branches missed.">			while(token.hasMoreTokens()){</span>
<span class="nc" id="L122">				String tokenString = token.nextToken();</span>
<span class="nc bnc" id="L123" title="All 2 branches missed.">				for(User u : UsersDAO.userList){</span>
<span class="nc bnc" id="L124" title="All 4 branches missed.">					if(like(u.getFirstname(), tokenString) || like(u.getLastname(), tokenString))</span>
<span class="nc" id="L125">						userListReturn.add(u);</span>
				}
			}
<span class="nc" id="L128">		}else{</span>
<span class="fc bfc" id="L129" title="All 2 branches covered.">			for(User u : UsersDAO.userList){</span>
<span class="pc bpc" id="L130" title="1 of 4 branches missed.">				if(like(u.getFirstname(), name) || like(u.getLastname(), name))</span>
<span class="fc" id="L131">					userListReturn.add(u);</span>
			}
		}
		
<span class="fc" id="L135">		return userListReturn;</span>
	}
	
	/**
	 * Like.
	 *
	 * @param str the str
	 * @param expr the expr
	 * @return true, if successful
	 */
	private static boolean like(String str, String expr) {
<span class="fc" id="L146">	    expr = expr.toLowerCase(); </span>
<span class="fc" id="L147">	    expr = expr.replace(&quot;.&quot;, &quot;\\.&quot;); //</span>
<span class="fc" id="L148">	    expr = expr.replace(&quot;?&quot;, &quot;.&quot;);</span>
<span class="fc" id="L149">	    expr = expr.replace(&quot;%&quot;, &quot;.*&quot;);</span>
<span class="fc" id="L150">	    str = str.toLowerCase();</span>
<span class="fc" id="L151">	    return str.matches(expr);</span>
	}
	
	/**
	 * Gets the user by username.
	 *
	 * @param username the username
	 * @return the user by username
	 */
	public User getUserByUsername(String username){
<span class="pc bpc" id="L161" title="1 of 2 branches missed.">		for (User u : userList){</span>
<span class="fc bfc" id="L162" title="All 2 branches covered.">			if (u.getUsername().getUsername().equals(username)){</span>
<span class="fc" id="L163">				return u;</span>
			}
		}
<span class="nc" id="L166">		return null;</span>
	}
	
	/**
	 * Sets the user list.
	 *
	 * @param userList the new user list
	 */
	public void setUserList(List&lt;User&gt; userList){
<span class="fc" id="L175">		UsersDAO.userList = new ArrayList&lt;User&gt;(userList);</span>
<span class="fc" id="L176">	}</span>
	
	/**
	 * Gets the user list.
	 *
	 * @return the user list
	 */
	public List&lt;User&gt; getUserList() {
<span class="fc" id="L184">		return new ArrayList&lt;User&gt;(userList);</span>
	}

}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.7.2.201409121644</span>test (3 Ιουν 2015 4:27:49 πμ)</div></body></html>