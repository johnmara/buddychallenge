<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../../../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../../../.resources/report.gif" type="image/gif"/><title>RandomQuestionGenerator.java</title><link rel="stylesheet" href="../../../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../../../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../../../.sessions.html" class="el_session">Sessions</a></span><a href="../../../index.html" class="el_report">test (3 Ιουν 2015 4:27:49 πμ)</a> &gt; <a href="../../index.html" class="el_group">BuddyChallenge</a> &gt; <a href="../index.html" class="el_bundle">src</a> &gt; <a href="index.source.html" class="el_package">buddychallenge.util</a> &gt; <span class="el_source">RandomQuestionGenerator.java</span></div><h1>RandomQuestionGenerator.java</h1><pre class="source lang-java linenums">/*
 * 
 */
package buddychallenge.util;

import java.util.List;
import java.util.Random;

import buddychallenge.entities.Question;

// TODO: Auto-generated Javadoc
/**
 * The Class RandomQuestionGenerator.
 */
public class RandomQuestionGenerator extends Random {
	
	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;
	
	/** The questions list. */
	private List&lt;Question&gt; questionsList;
	
	/**
	 * Instantiates a new random question generator.
	 *
	 * @param questionsList the questions list
	 */
<span class="fc" id="L28">	public RandomQuestionGenerator(List&lt;Question&gt; questionsList){</span>
<span class="fc" id="L29">		this.questionsList = questionsList;</span>
<span class="fc" id="L30">	}</span>
	
	/**
	 * Gets a random question from question list.
	 *
	 * @return the question
	 */
	public Question getQuestion(){
		
<span class="nc" id="L39">		int r = nextInt(questionsList.size());</span>
<span class="nc" id="L40">		Question q = this.questionsList.get(r);</span>
		
<span class="nc bnc" id="L42" title="All 2 branches missed.">		if(q==null){</span>
<span class="nc" id="L43">			System.out.println(&quot;null&quot;);</span>
<span class="nc" id="L44">			return null;</span>
		}else{
<span class="nc" id="L46">			this.questionsList.remove(r);</span>
<span class="nc" id="L47">			return q;</span>
		}
		
	}
	
	/**
	 * Gets the question by id.
	 *
	 * @param id the id
	 * @return the question
	 */
	public Question getQuestion(int id){
<span class="fc bfc" id="L59" title="All 2 branches covered.">		for (Question q: questionsList) {</span>
<span class="pc bpc" id="L60" title="1 of 2 branches missed.">			if(q.getQuestionID() == id){</span>
<span class="nc" id="L61">				return q;</span>
			}
		}
<span class="fc" id="L64">		return null;</span>
	}

}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.7.2.201409121644</span>test (3 Ιουν 2015 4:27:49 πμ)</div></body></html>