package buddychallenge.entities;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import buddychallenge.exceptions.BuddyException;
import buddychallenge.util.EmailAddress;
import buddychallenge.util.Gender;
import buddychallenge.util.Password;
import buddychallenge.util.Username;

public class User {
	private static int id;
	private int userID;
	private Username username;
	private Password password;
	private EmailAddress mail;
	private String firstname;
	private String lastname;
	private Gender gender;
	private Date birthdate;
	private Map<Question, String> questions;

	private List<User> buddies;
	private List<Post> posts;

	private BuddyException buddyException,buddyException2;

	public User() {
		this(null, null, null, "Uknown", "Uknown", null, null);
	}

	public User(Username username, Password password, EmailAddress mail,
			String firstname, String lastname, Gender gender, Date birthdate) {
		userID = id++;
		this.username = username;
		this.password = password;
		this.mail = mail;
		this.firstname = firstname;
		this.lastname = lastname;
		this.gender = gender;
		this.birthdate = birthdate;
		setQuestions(new HashMap<Question, String>());
		buddies = new ArrayList<User>();
		posts = new ArrayList<Post>();
		buddyException = new BuddyException(
				"You can not be buddy with yourself :S");
		buddyException2 = new BuddyException(
				"You are already buddy with this user :S");
	}

	// methods of User

	

	public boolean hasBuddy(User buddy) {
		for (User user : buddies) {
			if (buddy.equals(user)) {
				return true;
			}
		}
		return false;
	}

	public void createPost(Post post) {
		posts.add(post);
	}

	public void deletePost(Post post) {
		posts.remove(post);
	}

	public void addBuddy(User user) throws BuddyException {
		if (this.equals(user))
			throw buddyException;
		else if(this.hasBuddy(user))
			throw buddyException2;
		else
			buddies.add(user);
	}

	public void removeBuddy(User user) {
		buddies.remove(user);
	}

	// getters and setters
	public int getUserID() {
		return userID;
	}

	public Username getUsername() {
		return username;
	}

	public void setUsername(Username username) {
		this.username = username;
	}

	public Password getPassword() {
		return password;
	}

	public void setPassword(Password password) {
		this.password = password;
	}

	public EmailAddress getMail() {
		return mail;
	}

	public void setMail(EmailAddress mail) {
		this.mail = mail;
	}

	public String getFirstname() {
		return firstname;
	}

	public void setFirstname(String firstname) {
		this.firstname = firstname;
	}

	public String getLastname() {
		return lastname;
	}

	public void setLastname(String lastname) {
		this.lastname = lastname;
	}

	public Gender getGenre() {
		return gender;
	}

	public void setGender(Gender gender) {
		this.gender = gender;
	}

	public Date getBirthdate() {
		return birthdate;
	}

	public void setBirthdate(Date birthdate) {
		this.birthdate = birthdate;
	}

	public List<User> getBuddies() {
		return new ArrayList<User>(buddies);
	}

	public void setBuddies(List<User> buddies) {
		this.buddies = buddies;
	}

	public List<Post> getPosts() {
		return new ArrayList<Post>(posts);
	}

	public void setPosts(List<Post> posts) {
		this.posts = posts;
	}

	@Override
	public boolean equals(Object o) {
		if (o instanceof User) {
			return this.getUserID() == ((User) o).getUserID();
		}
		return false;
	}

	public Map<Question, String> getQuestions() {
		return new HashMap<Question, String>(questions);
	}

	public void setQuestions(Map<Question, String> questions) {
		this.questions = questions;
	}

	public void addQuestion(Question q, String answer) {
		questions.put(q, answer);
	}

	public void printBuddies() {
		for (User buddy : buddies) {
			System.out.println(buddy.getUsername());
		}
	}

	public void printPosts(User user) {
		String postText = "";
		for (Post p : posts) {
			if (p.getRule().hasAccess(p.getUser(), user)) {
				postText += "Post:\n" + p.getText();
				postText += "\nComments:\n" + p.getComments();
			}
			System.out.println(postText);
		}
	}

	public void printPosts() {
		String postText = "";
		for (Post p : posts) {
			postText += "Post:\n" + p.getText();
			postText += "\nComments:\n" + p.getComments();
			System.out.println(postText);
		}
	}

	
	public boolean hasQuestion(Question q){
		for (Map.Entry<Question, String> q2: getQuestions().entrySet()) { 
			if (q2.getKey().equals(q)) { 
				return true;
			}
		} 
		return false;
	}
	 
}
